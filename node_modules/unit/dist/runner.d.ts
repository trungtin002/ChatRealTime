import { IRunnerOpts } from "./options";
/**
 * Representation of a single test.
 */
export interface ITest {
    readonly description: string;
    readonly instance: (...args: any[]) => void;
    readonly args: Array<any[]>;
}
/**
 * Representation of a unit test.
 */
export interface IUnit<T = any> {
    readonly name: string;
    readonly instance: T;
    readonly tests: ITest[];
}
interface InvocationResult {
    error?: Error;
    time: number;
}
/**
 * Represents the various possible JavaScript entity types.
 */
export declare enum JsType {
    Object = "object",
    Function = "function",
    String = "string",
    Number = "number",
    Undefined = "undefined",
    BigInteger = "bigint",
    Symbol = "symbol",
    Boolean = "boolean"
}
/**
 * An assertion rule that must be met.
 */
export declare type Constraint = (...args: any[]) => string | null;
/**
 * Represents an empty function.
 */
export declare type Action = () => void;
export default abstract class Runner {
    /**
     * The callback function that will be invoked before every test.
     */
    static before: Action | null;
    /**
     * The callback function that will be invoked after every test.
     */
    static after: Action | null;
    /**
     * Run all registered tests.
     */
    static test(opts?: Partial<IRunnerOpts>): Promise<void>;
    /**
     * Clear all registered unit tests.
     */
    static clear(): void;
    static createTest(description: string, unitName: string, instance: any): void;
    static createUnit<T extends object = any>(name: string, instance: T): void;
    protected static units: Map<string, IUnit>;
    protected static processUnit(unit: IUnit, first?: boolean): void;
    protected static invokeTest(method: any, args: any[]): Promise<InvocationResult>;
    protected static processTest(test: ITest, isLast: boolean, shouldPrefix?: boolean, measure?: boolean): Promise<boolean>;
}
export {};
