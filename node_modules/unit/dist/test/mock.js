"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../decorators");
const mock_1 = __importDefault(require("../mock"));
const assert_1 = __importDefault(require("../assert"));
const is_1 = require("../is");
const emptyFn = () => { };
let default_1 = class default_1 {
    mockFn() {
        assert_1.default.that(mock_1.default.fn(emptyFn), is_1.Is.instanceOf(mock_1.default));
    }
    once() {
        const mock = mock_1.default.fn(emptyFn);
        // Verify mock stack is empty before.
        assert_1.default.that(mock["singleMockStack"], is_1.Is.emptyArray);
        mock.once(() => { });
        // Verify that the mock stack contains the new mock.
        assert_1.default.that(mock["singleMockStack"], is_1.Is.arrayWithLength(1));
    }
    always() {
        const mock = mock_1.default.fn(emptyFn);
        // Verify mock permanent implementation is undefined.
        assert_1.default.that(mock["permanentImpl"], is_1.Is.undefined);
        mock.always(() => { });
        // Verify that the permanent implementation is assigned and that it is a function.
        assert_1.default.that(mock["permanentImpl"], is_1.Is.function);
    }
    alwaysRemove() {
        const mock = mock_1.default.fn(emptyFn)
            .always(() => { })
            .always();
        assert_1.default.that(mock["permanentImpl"], is_1.Is.undefined);
    }
    invoke() {
        let fn = () => 0;
        // Mock the test function.
        fn = mock_1.default.fn(fn).proxy;
        assert_1.default.equal(fn(), 0);
    }
    onceMultiple() {
        let fn = () => 1;
        fn = mock_1.default.fn(fn)
            .once(() => 2)
            .once(() => 3)
            .proxy;
        assert_1.default.equal(fn(), 2);
        assert_1.default.equal(fn(), 3);
        assert_1.default.equal(fn(), 1);
    }
    onceResult() {
        let fn = () => 1;
        // Mock the test function.
        fn = mock_1.default.fn(fn)
            .returnOnce(2)
            .proxy;
        assert_1.default.equal(fn(), 2);
        assert_1.default.equal(fn(), 1);
    }
};
__decorate([
    decorators_1.test("Should return a mock instance upon statically creating mock"),
    decorators_1.target(mock_1.default.fn),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "mockFn", null);
__decorate([
    decorators_1.test("Should register a single mock implementation"),
    decorators_1.target(mock_1.default.prototype.once),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "once", null);
__decorate([
    decorators_1.test("Should assign the permanent implementation"),
    decorators_1.target(mock_1.default.prototype.always),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "always", null);
__decorate([
    decorators_1.test("Should be able to remove permanent implementation"),
    decorators_1.target(mock_1.default.prototype.always),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "alwaysRemove", null);
__decorate([
    decorators_1.test("Should invoke a mocked function"),
    decorators_1.target(mock_1.default.fn),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "invoke", null);
__decorate([
    decorators_1.test("Should mock a function once with various implementations"),
    decorators_1.target(mock_1.default.prototype.once),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "onceMultiple", null);
__decorate([
    decorators_1.test("Should mock a function result once"),
    decorators_1.target(mock_1.default.prototype.returnOnce),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "onceResult", null);
default_1 = __decorate([
    decorators_1.unit("Mock")
], default_1);
