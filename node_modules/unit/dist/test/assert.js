"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../decorators");
const assert_1 = __importDefault(require("../assert"));
let default_1 = class default_1 {
    that() {
        assert_1.default.that(null, () => {
            return null;
        });
    }
    throws() {
        assert_1.default.throws(() => {
            throw new Error("test");
        });
    }
    throwsWithMessage() {
        assert_1.default.throws(() => {
            throw new Error("test");
        }, "test");
    }
    true() {
        assert_1.default.true(true);
    }
    false() {
        assert_1.default.false(false);
    }
    equal(entity1, entity2) {
        assert_1.default.equal(entity1, entity2);
    }
    notEqual(entity1, entity2) {
        assert_1.default.notEqual(entity1, entity2);
    }
};
__decorate([
    decorators_1.test("Should assert"),
    decorators_1.target(assert_1.default.that),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "that", null);
__decorate([
    decorators_1.test("Should assert whether throws"),
    decorators_1.target(assert_1.default.throws),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "throws", null);
__decorate([
    decorators_1.test("Should whether throws with message"),
    decorators_1.target(assert_1.default.throws),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "throwsWithMessage", null);
__decorate([
    decorators_1.test("Should assert whether true"),
    decorators_1.target(assert_1.default.true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "true", null);
__decorate([
    decorators_1.test("Should assert whether false"),
    decorators_1.target(assert_1.default.false),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], default_1.prototype, "false", null);
__decorate([
    decorators_1.test("Should assert whether equal"),
    decorators_1.target(assert_1.default.equal),
    decorators_1.feed("test", "test"),
    decorators_1.feed(1, 1),
    decorators_1.feed(0, 0),
    decorators_1.feed(null, null),
    decorators_1.feed(undefined, undefined),
    decorators_1.feed(true, true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], default_1.prototype, "equal", null);
__decorate([
    decorators_1.test("Should assert whether not equal"),
    decorators_1.target(assert_1.default.notEqual),
    decorators_1.feed("john", "doe"),
    decorators_1.feed(0, 1),
    decorators_1.feed(undefined, null),
    decorators_1.feed("", "test"),
    decorators_1.feed(true, false),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], default_1.prototype, "notEqual", null);
default_1 = __decorate([
    decorators_1.unit("Assert")
], default_1);
