"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../decorators");
const does_1 = __importDefault(require("../does"));
const assert_1 = __importDefault(require("../assert"));
let default_1 = class default_1 {
    endWith(input, expected) {
        assert_1.default.that(input, does_1.default.endWith(expected));
    }
    startWith(input, expected) {
        assert_1.default.that(input, does_1.default.startWith(expected));
    }
    match(input, pattern) {
        assert_1.default.that(input, does_1.default.match(pattern));
    }
    haveProperty(obj, name) {
        assert_1.default.that(obj, does_1.default.haveProperty(name));
    }
    haveLength(arr, length) {
        assert_1.default.that(arr, does_1.default.haveLength(length));
    }
};
__decorate([
    decorators_1.test("Should assert whether ends with"),
    decorators_1.target(does_1.default.endWith),
    decorators_1.feed("john doe", "doe"),
    decorators_1.feed("john doe", "john doe"),
    decorators_1.feed("doe", "e"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", void 0)
], default_1.prototype, "endWith", null);
__decorate([
    decorators_1.test("Should assert whether starts with"),
    decorators_1.target(does_1.default.startWith),
    decorators_1.feed("john doe", "john"),
    decorators_1.feed("john doe", "john doe"),
    decorators_1.feed("doe", "d"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", void 0)
], default_1.prototype, "startWith", null);
__decorate([
    decorators_1.test("Should assert whether matches pattern"),
    decorators_1.target(does_1.default.match),
    decorators_1.feed("john doe", /^john/),
    decorators_1.feed("john doe", /doe$/),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, RegExp]),
    __metadata("design:returntype", void 0)
], default_1.prototype, "match", null);
__decorate([
    decorators_1.test("Should assert whether has property"),
    decorators_1.target(does_1.default.haveProperty),
    decorators_1.feed({
        name: "john"
    }, "name"),
    decorators_1.feed({
        name: "doe",
        age: 21
    }, "age"),
    decorators_1.feed([], "length"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", void 0)
], default_1.prototype, "haveProperty", null);
__decorate([
    decorators_1.test("Should assert whether has length"),
    decorators_1.target(does_1.default.haveLength),
    decorators_1.feed([], 0),
    decorators_1.feed(["john"], 1),
    decorators_1.feed(["john", "doe"], 2),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Number]),
    __metadata("design:returntype", void 0)
], default_1.prototype, "haveLength", null);
default_1 = __decorate([
    decorators_1.unit("Does")
], default_1);
