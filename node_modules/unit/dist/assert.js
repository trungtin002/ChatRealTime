"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_1 = require("./is");
const util_1 = __importDefault(require("./util"));
class Assert {
    /**
     * Shorthand alias for Is.null.
     * @param {*} input The input value to assert.
     */
    static null(input) {
        Assert.that(input, is_1.Is.null);
    }
    /**
     * Shorthand alias for Is.empty.
     * @param {*} input The input value to assert.
     */
    static empty(input) {
        Assert.that(input, is_1.Is.empty);
    }
    /**
     * Shorthand alias for Is.string.
     * @param {*} input The input value to assert.
     */
    static string(input) {
        Assert.that(input, is_1.Is.string);
    }
    /**
     * Shorthand alias for Is.object.
     * @param {*} input The input value to assert.
     */
    static object(input) {
        Assert.that(input, is_1.Is.object);
    }
    /**
     * Shorthand alias for Is.number.
     * @param {*} input The input value to assert.
     */
    static number(input) {
        Assert.that(input, is_1.Is.number);
    }
    /**
     * Shorthand alias for Is.boolean.
     * @param {*} input The input value to assert.
     */
    static boolean(input) {
        Assert.that(input, is_1.Is.boolean);
    }
    /**
     * Assert that input satisfies the specified constraint(s).
     */
    static that(input, ...constraints) {
        for (const constraint of constraints) {
            const result = constraint(input);
            if (result !== null) {
                Assert.complain(result);
            }
        }
    }
    /**
     * Assert that two entities are equal.
     */
    static equal(entity1, entity2) {
        if (typeof entity1 !== typeof entity2) {
            Assert.complain(`Expected type of '${entity1}' (${typeof entity1}) to equal type of '${entity2}' (${typeof entity2})`);
        }
        else if (entity1 !== entity2) {
            Assert.complain(`Expected '${entity1}' to equal '${entity2}'`);
        }
    }
    /**
     * Assert that two entities are not equal.
     */
    static notEqual(entity1, entity2) {
        if (entity1 === entity2) {
            Assert.complain(`Expected '${entity1}' to not equal '${entity2}'`);
        }
    }
    /**
     * Assert that input is equal to true.
     */
    static true(input) {
        if (input !== true) {
            Assert.complain(`Expected '${input}' to be true`);
        }
    }
    /**
     * Assert that input is equal to false.
     */
    static false(input) {
        if (input !== false) {
            Assert.complain(`Expected '${input}' to be false`);
        }
    }
    /**
     * Assert that the input method throws an error.
     */
    static throws(method, message) {
        let resultError = null;
        const methodName = util_1.default.extractMethodName(method);
        try {
            method();
        }
        catch (error) {
            resultError = error;
        }
        if (resultError === null) {
            Assert.complain(`Expected function '${methodName}' to throw`);
        }
        else if (message !== undefined && resultError.message !== message) {
            Assert.complain(`Expected function '${methodName}' to throw with message '${message}' but got '${resultError.message}' instead`);
        }
    }
    // TODO: Simplify/merge with the 'throw()' method somehow without having to copy the entire function.
    /**
     * Assert that the input async method throws an error.
     */
    static async throwsAsync(method, message) {
        let resultError = null;
        const methodName = util_1.default.extractMethodName(method);
        try {
            await method();
        }
        catch (error) {
            resultError = error;
        }
        if (resultError === null) {
            Assert.complain(`Expected async function '${methodName}' to throw`);
        }
        else if (message !== undefined && resultError.message !== message) {
            Assert.complain(`Expected async function '${methodName}' to throw with message '${message}' but got '${resultError.message}' instead`);
        }
    }
    /**
     * Throw an error into the console output.
     */
    static complain(message) {
        throw new Error(message);
    }
}
exports.default = Assert;
