import { Constraint, JsType } from "./runner";
export declare abstract class Is {
    /**
     * Assert that input is greater than specified.
     */
    static greaterThan(num: number): Constraint;
    /**
     * Assert that input is a number less than specified.
     */
    static lessThan(num: number): Constraint;
    /**
     * Assert that input is greater or equal to specified.
     */
    static greaterOrEqual(num: number): Constraint;
    /**
     * Assert that input is less or equal to specified.
     */
    static lessOrEqual(num: number): Constraint;
    /**
     * Assert that input is a negative number.
     */
    static readonly negative: Constraint;
    /**
     * Assert that input is a positive number.
     */
    static readonly positive: Constraint;
    /**
     * Assert that input is the number zero.
     */
    static readonly neutral: Constraint;
    /**
     * Assert that input is null.
     */
    static readonly null: Constraint;
    /**
     * Assert that input is a number that falls within specified range.
     */
    static inRange(from: number, to: number): Constraint;
    /**
     * Assert that input is empty, has no value(s) or not defined.
     */
    static readonly empty: Constraint;
    /**
     * Assert that input is an empty string.
     */
    static readonly emptyString: Constraint;
    /**
     * Assert that input is an empty array.
     */
    static readonly emptyArray: Constraint;
    /**
     * Assert that input is of the specified type.
     */
    static type(type: JsType): Constraint;
    /**
     * Assert that input is NaN (not a number).
     */
    static readonly NaN: Constraint;
    /**
     * Assert that input is an odd number.
     */
    static readonly odd: Constraint;
    /**
     * Assert that input is an even number.
     */
    static readonly even: Constraint;
    /**
     * Assert that input is an instance of the specified class.
     */
    static instanceOf(parent: any): Constraint;
    /**
     * Assert that input is an array.
     */
    static readonly array: Constraint;
    /**
     * Assert that input is an array with the specified length.
     * @param {number} length The amount of elements array must contain.
     */
    static arrayWithLength(length: number): Constraint;
    /**
     * Assert that input is an array of a specific type.
     */
    static arrayOf(type: JsType): Constraint;
    /**
     * Asserts that a mock function was invoked.
     */
    static readonly called: Constraint;
    /**
     * Assert that input is a string.
     */
    static readonly string: Constraint;
    /**
     * Assert that input is an object.
     */
    static readonly object: Constraint;
    /**
     * Assert that input is a boolean.
     */
    static readonly boolean: Constraint;
    /**
     * Assert that input is a big integer.
     */
    static readonly bigInt: Constraint;
    /**
     * Assert that input is undefined.
     */
    static readonly undefined: Constraint;
    /**
     * Assert that input is neither undefined, null, or NaN.
     */
    static readonly defined: Constraint;
    /**
     * Assert that input is a symbol.
     */
    static readonly symbol: Constraint;
    /**
     * Assert that input is a function.
     */
    static readonly function: Constraint;
    /**
     * Assert that input is a number.
     */
    static readonly number: Constraint;
}
