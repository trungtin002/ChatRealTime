"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = __importDefault(require("./runner"));
/**
 * Feed in-line data to a test. Must be attached to a method.
 * @param {Array<*>} args The array of arguments that the test will receive.
 */
function feed(...args) {
    return function (target, prop) {
        const method = target[prop];
        DecoratorUtil.ensureFunc(method);
        if (method.$$unit_feed === undefined || !Array.isArray(method.$$unit_feed)) {
            method.$$unit_feed = [];
        }
        method.$$unit_feed.push(args);
    };
}
exports.feed = feed;
/**
 * Define a test. Must be attached to a class method.
 * @param {string | undefined} description The description to display after the test is executed.
 */
function test(description) {
    return function (target, prop) {
        const method = target[prop];
        DecoratorUtil.ensureFunc(method);
        // Use function name if no name is provided.
        if (description === undefined) {
            description = method.name;
        }
        // Mark function as a test.
        method.$$unit_test = description;
    };
}
exports.test = test;
/**
 * Define a test unit. Must be attached to a class.
 * @param {string | undefined} name The name of the unit. Will default to the class's name if not provided.
 */
function unit(name) {
    return function (target) {
        // TODO: Required?
        // DecoratorUtils.ensureObj(target);
        if (name === undefined) {
            name = target.name;
        }
        runner_1.default.createUnit(name, target);
        // Find tests
        for (const prop of Object.getOwnPropertyNames(target.prototype)) {
            const method = target.prototype[prop];
            if (typeof method !== "function") {
                continue;
            }
            else if (typeof method.$$unit_test === "string") {
                runner_1.default.createTest(method.$$unit_test, name, method);
            }
        }
    };
}
exports.unit = unit;
/**
 * Mark a test with the specified target method's name.
 */
function target(instance) {
    return function (target, prop) {
        if (typeof instance !== "function" || typeof instance.name !== "string") {
            throw new Error("Invalid prototype specified");
        }
        // Mark function with the corresponding target.
        target[prop].$$unit_target = instance.name;
    };
}
exports.target = target;
/**
 * Provides utilities for working with decorators
 */
class DecoratorUtil {
    static ensureFunc(target) {
        if (typeof target !== "function") {
            throw new Error("Expecting target to be a function");
        }
    }
    static ensureObj(target) {
        if (typeof target !== "object") {
            throw new Error("Expecting target to be an object");
        }
    }
}
exports.DecoratorUtil = DecoratorUtil;
