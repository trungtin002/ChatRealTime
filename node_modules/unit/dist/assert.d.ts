import { Constraint, Action } from "./runner";
export default abstract class Assert {
    /**
     * Shorthand alias for Is.null.
     * @param {*} input The input value to assert.
     */
    static null(input: any): void;
    /**
     * Shorthand alias for Is.empty.
     * @param {*} input The input value to assert.
     */
    static empty(input: any): void;
    /**
     * Shorthand alias for Is.string.
     * @param {*} input The input value to assert.
     */
    static string(input: any): void;
    /**
     * Shorthand alias for Is.object.
     * @param {*} input The input value to assert.
     */
    static object(input: any): void;
    /**
     * Shorthand alias for Is.number.
     * @param {*} input The input value to assert.
     */
    static number(input: any): void;
    /**
     * Shorthand alias for Is.boolean.
     * @param {*} input The input value to assert.
     */
    static boolean(input: any): void;
    /**
     * Assert that input satisfies the specified constraint(s).
     */
    static that(input: any[] | any, ...constraints: Constraint[]): void;
    /**
     * Assert that two entities are equal.
     */
    static equal(entity1: any, entity2: any): void;
    /**
     * Assert that two entities are not equal.
     */
    static notEqual(entity1: any, entity2: any): void;
    /**
     * Assert that input is equal to true.
     */
    static true(input: any): void;
    /**
     * Assert that input is equal to false.
     */
    static false(input: any): void;
    /**
     * Assert that the input method throws an error.
     */
    static throws(method: Action, message?: string): void;
    /**
     * Assert that the input async method throws an error.
     */
    static throwsAsync(method: Action, message?: string): Promise<void>;
    /**
     * Throw an error into the console output.
     */
    protected static complain(message: string): void;
}
