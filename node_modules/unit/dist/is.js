"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = require("./runner");
const util_1 = __importDefault(require("./util"));
const mock_1 = __importDefault(require("./mock"));
class Is {
    /**
     * Assert that input is greater than specified.
     */
    static greaterThan(num) {
        return (input) => {
            if (input > num) {
                return null;
            }
            return `Expected '${input}' to be greater than '${num}'`;
        };
    }
    /**
     * Assert that input is a number less than specified.
     */
    static lessThan(num) {
        return (input) => {
            if (input < num) {
                return null;
            }
            return `Expected '${input}' to be greater than '${num}'`;
        };
    }
    /**
     * Assert that input is greater or equal to specified.
     */
    static greaterOrEqual(num) {
        return (input) => {
            if (input > num || input === num) {
                return null;
            }
            return `Expected '${input}' to be greater or equal to '${num}'`;
        };
    }
    /**
     * Assert that input is less or equal to specified.
     */
    static lessOrEqual(num) {
        return (input) => {
            if (input < num || input === num) {
                return null;
            }
            return `Expected '${input}' to be less or equal to '${num}'`;
        };
    }
    /**
     * Assert that input is a negative number.
     */
    static get negative() {
        return (input) => {
            if (input < 0) {
                return null;
            }
            return `Expected '${input}' to be negative`;
        };
    }
    /**
     * Assert that input is a positive number.
     */
    static get positive() {
        return (input) => {
            if (input > 0) {
                return null;
            }
            return `Expected '${input}' to be positive`;
        };
    }
    /**
     * Assert that input is the number zero.
     */
    static get neutral() {
        return (input) => {
            if (input === 0) {
                return null;
            }
            return `Expected '${input}' to be neutral`;
        };
    }
    /**
     * Assert that input is null.
     */
    static get null() {
        return (input) => {
            if (input === null) {
                return null;
            }
            return `Expected '${input}' to be null`;
        };
    }
    /**
     * Assert that input is a number that falls within specified range.
     */
    static inRange(from, to) {
        return (input) => {
            if (typeof input !== "number") {
                return `Expected '${input}' to be a number`;
            }
            else if (input >= from && input <= to) {
                return null;
            }
            return `Expected '${input}' to be within range ${from}-${to}`;
        };
    }
    /**
     * Assert that input is empty, has no value(s) or not defined.
     */
    static get empty() {
        return (input) => {
            if (util_1.default.isEmpty(input)) {
                return null;
            }
            return `Expected '${input}' to be empty`;
        };
    }
    /**
     * Assert that input is an empty string.
     */
    static get emptyString() {
        return (input) => {
            if (input === "") {
                return null;
            }
            return `Expected '${input}' to be an empty string`;
        };
    }
    /**
     * Assert that input is an empty array.
     */
    static get emptyArray() {
        return (input) => {
            if (Array.isArray(input) && input.length === 0) {
                return null;
            }
            return `Expected '${input}' to be an empty array`;
        };
    }
    /**
     * Assert that input is of the specified type.
     */
    static type(type) {
        return (input) => {
            const inputType = typeof input;
            if (inputType === type) {
                if (inputType === runner_1.JsType.Object && input !== null) {
                    return null;
                }
                else if (inputType !== runner_1.JsType.Object) {
                    return null;
                }
            }
            return `Expected '${input}' to be of type '${type}' but got '${inputType}'`;
        };
    }
    /**
     * Assert that input is NaN (not a number).
     */
    static get NaN() {
        return (input) => {
            if (typeof input === "number" && isNaN(input)) {
                return null;
            }
            return `Expected '${input}' to be NaN`;
        };
    }
    /**
     * Assert that input is an odd number.
     */
    static get odd() {
        return (input) => {
            if (typeof input === "number" && !util_1.default.isEven(input)) {
                return null;
            }
            return `Expected '${input}' to be an odd number`;
        };
    }
    /**
     * Assert that input is an even number.
     */
    static get even() {
        return (input) => {
            if (typeof input === "number" && util_1.default.isEven(input)) {
                return null;
            }
            return `Expected '${input}' to be an even number`;
        };
    }
    /**
     * Assert that input is an instance of the specified class.
     */
    static instanceOf(parent) {
        return (input) => {
            if (input instanceof parent) {
                return null;
            }
            return `Expected '${input}' to be an instance of '${parent}'`;
        };
    }
    /**
     * Assert that input is an array.
     */
    static get array() {
        return (input) => {
            if (Array.isArray(input)) {
                return null;
            }
            return `Expected '${input}' to be an array`;
        };
    }
    /**
     * Assert that input is an array with the specified length.
     * @param {number} length The amount of elements array must contain.
     */
    static arrayWithLength(length) {
        return (input) => {
            if (Array.isArray(input) && input.length === length) {
                return null;
            }
            return `Expected '${input}' to be an array with length '${length}'`;
        };
    }
    /**
     * Assert that input is an array of a specific type.
     */
    static arrayOf(type) {
        return (input) => {
            if (Array.isArray(input)) {
                let succeeded = true;
                for (const item of input) {
                    if (typeof item !== type) {
                        succeeded = false;
                        break;
                    }
                }
                if (succeeded) {
                    return null;
                }
            }
            return `Expected '${input}' to be an array of type '${type}'`;
        };
    }
    /**
     * Asserts that a mock function was invoked.
     */
    static get called() {
        return (input) => {
            if (input instanceof mock_1.default && input.calls.length > 0) {
                return null;
            }
            return `Expected '${input}' to be called`;
        };
    }
    /**
     * Assert that input is a string.
     */
    static get string() {
        return Is.type(runner_1.JsType.String);
    }
    /**
     * Assert that input is an object.
     */
    static get object() {
        return Is.type(runner_1.JsType.Object);
    }
    /**
     * Assert that input is a boolean.
     */
    static get boolean() {
        return Is.type(runner_1.JsType.Boolean);
    }
    /**
     * Assert that input is a big integer.
     */
    static get bigInt() {
        return Is.type(runner_1.JsType.BigInteger);
    }
    /**
     * Assert that input is undefined.
     */
    static get undefined() {
        return Is.type(runner_1.JsType.Undefined);
    }
    /**
     * Assert that input is neither undefined, null, or NaN.
     */
    static get defined() {
        return (input) => {
            if (typeof input !== "undefined" && (typeof input === "number" && !isNaN(input)) && input !== null) {
                return null;
            }
            return `Expected '${input}' to be defined`;
        };
    }
    /**
     * Assert that input is a symbol.
     */
    static get symbol() {
        return Is.type(runner_1.JsType.Symbol);
    }
    /**
     * Assert that input is a function.
     */
    static get function() {
        return Is.type(runner_1.JsType.Function);
    }
    /**
     * Assert that input is a number.
     */
    static get number() {
        return Is.type(runner_1.JsType.Number);
    }
}
exports.Is = Is;
